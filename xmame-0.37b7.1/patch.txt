diff -Naur ../tmp/xmame-0.37b7.1/src/cheat.c xmame-0.37b7.1/src/cheat.c
--- ../tmp/xmame-0.37b7.1/src/cheat.c	2000-09-13 14:07:34.000000000 -0500
+++ xmame-0.37b7.1/src/cheat.c	2023-07-04 12:16:52.528564797 -0400
@@ -1601,6 +1601,7 @@
 		BankToScanTable[2] = 1;
 	}
 #endif
+#if 0 /* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 	if (Machine->gamedrv->clone_of == &driver_neogeo)
@@ -1611,7 +1612,7 @@
 	}
 #endif
 #endif
-
+#endif /* RB */
 	/* No CPU so we scan RAM & BANKn */
 	if ((CpuToScan == -1) && (fastsearch == 2))
 		for (i = 0; i < 9;i ++)
diff -Naur ../tmp/xmame-0.37b7.1/src/driver.c xmame-0.37b7.1/src/driver.c
--- ../tmp/xmame-0.37b7.1/src/driver.c	2000-09-13 13:49:40.000000000 -0500
+++ xmame-0.37b7.1/src/driver.c	2023-06-30 15:03:37.681141177 -0400
@@ -68,6 +68,10 @@
 
 #else	/* DRIVER_RECURSIVE */
 
+#if 1 /* force tiny compile */
+	DRIVER( pacman )    /* (c) 1980 Namco */
+#else
+
 #ifndef NEOMAME
 
 	/* "Pacman hardware" games */
@@ -1609,8 +1613,8 @@
 	/* Sega System 1 / System 2 games */
 	DRIVER( starjack )	/* 834-5191 (c) 1983 (S1) */
 	DRIVER( starjacs )	/* (c) 1983 Stern (S1) */
-	DRIVER( regulus )	/* 834-5328 (c) 1983 (S1) */
-	DRIVER( regulusu )	/* 834-5328 (c) 1983 (S1) */
+	DRIVER( regulus )	/* 834-5328Â (c) 1983 (S1) */
+	DRIVER( regulusu )	/* 834-5328Â (c) 1983 (S1) */
 	DRIVER( upndown )	/* (c) 1983 (S1) */
 	DRIVER( mrviking )	/* 834-5383 (c) 1984 (S1) */
 	DRIVER( mrvikinj )	/* 834-5383 (c) 1984 (S1) */
@@ -3128,6 +3132,8 @@
 	/* Strikers 1945 Plus */
 	/* Ganryu */
 
+#endif /* force tiny compile */
+
 #endif	/* DRIVER_RECURSIVE */
 
 #endif	/* TINY_COMPILE */
diff -Naur ../tmp/xmame-0.37b7.1/src/mame.mak xmame-0.37b7.1/src/mame.mak
--- ../tmp/xmame-0.37b7.1/src/mame.mak	2000-09-13 13:50:01.000000000 -0500
+++ xmame-0.37b7.1/src/mame.mak	2023-06-30 15:08:14.944113562 -0400
@@ -280,29 +280,29 @@
 $(OBJ)/williams.a: \
 	$(OBJ)/machine/williams.o $(OBJ)/vidhrdw/williams.o $(OBJ)/sndhrdw/williams.o $(OBJ)/drivers/williams.o \
 
-$(OBJ)/capcom.a: \
-	$(OBJ)/vidhrdw/vulgus.o $(OBJ)/drivers/vulgus.o \
-	$(OBJ)/vidhrdw/sonson.o $(OBJ)/drivers/sonson.o \
-	$(OBJ)/vidhrdw/higemaru.o $(OBJ)/drivers/higemaru.o \
-	$(OBJ)/vidhrdw/1942.o $(OBJ)/drivers/1942.o \
-	$(OBJ)/vidhrdw/exedexes.o $(OBJ)/drivers/exedexes.o \
-	$(OBJ)/vidhrdw/commando.o $(OBJ)/drivers/commando.o \
-	$(OBJ)/vidhrdw/gng.o $(OBJ)/drivers/gng.o \
-	$(OBJ)/vidhrdw/gunsmoke.o $(OBJ)/drivers/gunsmoke.o \
-	$(OBJ)/vidhrdw/srumbler.o $(OBJ)/drivers/srumbler.o \
-	$(OBJ)/vidhrdw/lwings.o $(OBJ)/drivers/lwings.o \
-	$(OBJ)/vidhrdw/sidearms.o $(OBJ)/drivers/sidearms.o \
-	$(OBJ)/vidhrdw/bionicc.o $(OBJ)/drivers/bionicc.o \
-	$(OBJ)/vidhrdw/1943.o $(OBJ)/drivers/1943.o \
-	$(OBJ)/vidhrdw/blktiger.o $(OBJ)/drivers/blktiger.o \
-	$(OBJ)/vidhrdw/tigeroad.o $(OBJ)/drivers/tigeroad.o \
-	$(OBJ)/vidhrdw/lastduel.o $(OBJ)/drivers/lastduel.o \
-	$(OBJ)/vidhrdw/sf1.o $(OBJ)/drivers/sf1.o \
-	$(OBJ)/machine/kabuki.o \
-	$(OBJ)/vidhrdw/mitchell.o $(OBJ)/drivers/mitchell.o \
-	$(OBJ)/vidhrdw/cbasebal.o $(OBJ)/drivers/cbasebal.o \
-	$(OBJ)/vidhrdw/cps1.o $(OBJ)/drivers/cps1.o \
-	$(OBJ)/drivers/zn.o \
+#$(OBJ)/capcom.a: \
+#	$(OBJ)/vidhrdw/vulgus.o $(OBJ)/drivers/vulgus.o \
+#	$(OBJ)/vidhrdw/sonson.o $(OBJ)/drivers/sonson.o \
+#	$(OBJ)/vidhrdw/higemaru.o $(OBJ)/drivers/higemaru.o \
+#	$(OBJ)/vidhrdw/1942.o $(OBJ)/drivers/1942.o \
+#	$(OBJ)/vidhrdw/exedexes.o $(OBJ)/drivers/exedexes.o \
+#	$(OBJ)/vidhrdw/commando.o $(OBJ)/drivers/commando.o \
+#	$(OBJ)/vidhrdw/gng.o $(OBJ)/drivers/gng.o \
+#	$(OBJ)/vidhrdw/gunsmoke.o $(OBJ)/drivers/gunsmoke.o \
+#	$(OBJ)/vidhrdw/srumbler.o $(OBJ)/drivers/srumbler.o \
+#	$(OBJ)/vidhrdw/lwings.o $(OBJ)/drivers/lwings.o \
+#	$(OBJ)/vidhrdw/sidearms.o $(OBJ)/drivers/sidearms.o \
+#	$(OBJ)/vidhrdw/bionicc.o $(OBJ)/drivers/bionicc.o \
+#	$(OBJ)/vidhrdw/1943.o $(OBJ)/drivers/1943.o \
+#	$(OBJ)/vidhrdw/blktiger.o $(OBJ)/drivers/blktiger.o \
+#	$(OBJ)/vidhrdw/tigeroad.o $(OBJ)/drivers/tigeroad.o \
+#	$(OBJ)/vidhrdw/lastduel.o $(OBJ)/drivers/lastduel.o \
+#	$(OBJ)/vidhrdw/sf1.o $(OBJ)/drivers/sf1.o \
+#	$(OBJ)/machine/kabuki.o \
+#	$(OBJ)/vidhrdw/mitchell.o $(OBJ)/drivers/mitchell.o \
+#	$(OBJ)/vidhrdw/cbasebal.o $(OBJ)/drivers/cbasebal.o \
+#	$(OBJ)/vidhrdw/cps1.o $(OBJ)/drivers/cps1.o \
+#	$(OBJ)/drivers/zn.o \
 
 $(OBJ)/capbowl.a: \
 	$(OBJ)/machine/capbowl.o $(OBJ)/vidhrdw/capbowl.o $(OBJ)/vidhrdw/tms34061.o $(OBJ)/drivers/capbowl.o \
diff -Naur ../tmp/xmame-0.37b7.1/src/unix/sysdep/dsp-drivers/alsa.c xmame-0.37b7.1/src/unix/sysdep/dsp-drivers/alsa.c
--- ../tmp/xmame-0.37b7.1/src/unix/sysdep/dsp-drivers/alsa.c	2000-08-21 08:17:14.000000000 -0500
+++ xmame-0.37b7.1/src/unix/sysdep/dsp-drivers/alsa.c	2023-07-03 12:59:38.998039579 -0400
@@ -2,7 +2,8 @@
  * ALSA Sound Driver for xMAME
  *
  *  Copyright 2000 Luc Saillard <luc.saillard@alcove.fr>
- *  
+ *  Copyright 2001, 2002, 2003 Shyouzou Sugitani <shy@debian.or.jp>
+ *
  *  This file and the acompanying files in this directory are free software;
  *  you can redistribute them and/or modify them under the terms of the GNU
  *  Library General Public License as published by the Free Software Foundation;
@@ -22,16 +23,50 @@
  *   v 0.1 Thu, 10 Aug 2000 08:29:00 +0200
  *     - initial release
  *     - TODO: find the best sound card to play sound.
- * 
+ *   v 0.2 Wed, 13 Sep 2000    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - change from block to stream mode.
+ *   v 0.3 Sat, 16 Sep 2000    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - one important bug fix, performance improvements and code cleanup.
+ *   v 0.4 Sun, 15 Apr 2001    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - minor cosmetic changes.
+ *     - suppression of bogus warnings about underruns.
+ *     - TODO: add support for ALSA 0.9 API.
+ *   v 0.5 Thu, 17 May 2001    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - added preliminary support for ALSA 0.9 API.
+ *     - split of the 0.5 and 0.9 API stuff into separate files.
+ *   v 0.6 Sat, 19 May 2001    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - update of the 0.9 API stuff.
+ *       added -list-alsa-pcm option.
+ *       improved write error handling.
+ *   v 0.7 Sat, 08 Sep 2001    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - update of the 0.9 API stuff.
+ *       added -alsa-buffer option.
+ *       use SND_PCM_FORMAT_S16 instead of SND_PCM_FORMAT_S16_{LE,BE}.
+ *   v 0.8 Thu, 13 Sep 2001    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - update of the 0.9 API stuff.
+ *       changed the -alsapcm(-pcm) to -alsa-pcm(-apcm).
+ *       changed the default value of the -alsa-pcm.
+ *   V 0.8a                    Stephen Anthony
+ *     - Fixed a problem in the ALSA 0.9 driver with setting the sample rate
+ *       on SB128 soundcards.
+ *   V 0.9 Mon, 13 Jan 2003    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - removed the 0.5 API support.
+ *   V 1.0 Wed, 21 Jan 2004    Shyouzou Sugitani <shy@debian.or.jp>
+ *     - Update to the ALSA 1.0 API.
+ *
  */
 
 #include "xmame.h"           /* xMAME common header */
 #include "devices.h"         /* xMAME device header */
 
 #ifdef SYSDEP_DSP_ALSA
+
+#define ALSA_PCM_NEW_HW_PARAMS_API 1
+
 #include <sys/ioctl.h>       /* System and I/O control */
-#include <sys/asoundlib.h>   /* ALSA sound library header */
-#include "sysdep/sysdep_dsp.h"
+#include <alsa/asoundlib.h>  /* ALSA sound library header */
+//#include <sys/asoundlib.h>   /* ALSA sound library header */
+//#include "sysdep/sysdep_dsp.h"
 #include "sysdep/sysdep_dsp_priv.h"
 #include "sysdep/plugin_manager.h"
 
@@ -39,10 +74,10 @@
 struct alsa_dsp_priv_data
 {
   snd_pcm_t *pcm_handle;
-  char *audiobuf;
-  int frags;
-  int frag;
-  int buffer_size;
+//  char *audiobuf;
+//  int frags;
+//  int frag;
+//  int buffer_size;
 };
 
 /* public methods prototypes (static but exported through the sysdep_dsp or
@@ -56,31 +91,44 @@
 static int alsa_device_list(struct rc_option *option, const char *arg,
     int priority);
 static int alsa_dsp_set_format(struct alsa_dsp_priv_data *priv, snd_pcm_format_t *format);
-
+static int alsa_pcm_list(struct rc_option *option, const char *arg,
+    int priority);
+static int alsa_dsp_set_params(struct alsa_dsp_priv_data *priv);
 
 /* public variables */
 
-static int alsa_card;
-static int alsa_device;
-
+static struct {
+        snd_pcm_format_t format;
+        unsigned int channels;
+        unsigned int rate;
+} pcm_params;
+
+static char *pcm_name = NULL;
+static snd_pcm_stream_t stream = SND_PCM_STREAM_PLAYBACK;
+static size_t bits_per_sample, bits_per_frame;
+static unsigned int buffer_time;
+static snd_pcm_uframes_t period_frames = 1;
 
 struct rc_option alsa_dsp_opts[] = {
-   /* name, shortname, type, dest, deflt, min, max, func, help */
-    { "Alsa Sound System", NULL,     rc_seperator, NULL,
-      NULL,    0,      0,    NULL,
-      NULL },
-    { "list-alsa-cards", NULL,	rc_use_function_no_arg, NULL,
-      NULL,    0,      0,    alsa_device_list,
-      "List available sound-dsp plugins" },
-    { "alsacard",    NULL,     rc_int,   &alsa_card,
-      "0",     0,     32,    NULL,
-      "select card # or card id (0-32)" },
-    { "alsadevice",    NULL,     rc_int,   &alsa_device,
-      "0",     0,     32,    NULL,
-      "select device #" },
-    { NULL,    NULL,     rc_end,   NULL,
-      NULL,    0,      0,    NULL,
-      NULL }
+	/* name, shortname, type, dest, deflt, min, max, func, help */
+	{ "Alsa Sound System", NULL,     rc_seperator, NULL,
+	  NULL,    0,      0,    NULL,
+	  NULL },
+	{ "list-alsa-cards", NULL,	rc_use_function_no_arg, NULL,
+	  NULL,    0,      0,    alsa_device_list,
+	  "List available sound cards" },
+	{ "list-alsa-pcm", NULL,	rc_use_function_no_arg, NULL,
+	  NULL,    0,      0,    alsa_pcm_list,
+	  "List available pcm devices" },
+	{ "alsa-pcm",    "apcm",  rc_string,    &pcm_name,
+	  "default",     0,    0,    NULL,
+	  "Specify the PCM by name" },
+	{ "alsa-buffer", "abuf",  rc_int,       &buffer_time,
+	  "250000",      0,    0,    NULL,
+	  "Set the buffer size [micro sec] (default: 250000)" },
+	{ NULL,    NULL,     rc_end,   NULL,
+	  NULL,    0,      0,    NULL,
+	  NULL }
 };
 
 const struct plugin_struct sysdep_dsp_alsa = {
@@ -110,16 +158,15 @@
  */
 static int alsa_dsp_init(void)
 {
-  int cards=snd_cards();
-  if (cards<=0)
-   {
-     fprintf(stderr,"No cards detected.\nALSA sound disabled.\n");
-     return 1;
-   }
-  return 0;
-}
-
+    int card = -1;
 
+	if (snd_card_next(&card) < 0 || card < 0) {
+		fprintf(stderr, "No cards detected.\n"
+			"ALSA sound disabled.\n");
+		return 1;
+	}
+	return 0;
+}
 
 /*
  * Function name : alsa_dsp_create
@@ -132,118 +179,84 @@
  */
 static void *alsa_dsp_create(const void *flags)
 {
-  int err;
-  struct alsa_dsp_priv_data *priv = NULL;
-  struct sysdep_dsp_struct *dsp = NULL;
-  const struct sysdep_dsp_create_params *params = flags;
-  char *cardname;
-  struct snd_pcm_channel_info cinfo;
-  snd_pcm_format_t format;
-
-  /* allocate the dsp struct */
-  if (!(dsp = calloc(1, sizeof(struct sysdep_dsp_struct))))
-   {
-     fprintf(stderr,
-	 "error malloc failed for struct sysdep_dsp_struct\n");
-     return NULL;
-   }
-
-  /* alloc private data */
-  if(!(priv = calloc(1, sizeof(struct alsa_dsp_priv_data))))
-   {
-     fprintf(stderr,
-	 "error malloc failed for struct alsa_dsp_priv_data\n");
-     alsa_dsp_destroy(dsp);
-     return NULL;
-   }
-
-  /* fill in the functions and some data */
-  memset(priv,0,sizeof(struct alsa_dsp_priv_data));
-  dsp->_priv = priv;
-  dsp->get_freespace = alsa_dsp_get_freespace;
-  dsp->write = alsa_dsp_write;
-  dsp->destroy = alsa_dsp_destroy;
-  dsp->hw_info.type = params->type;
-  dsp->hw_info.samplerate = params->samplerate;
-
-  priv->buffer_size = -1;
-  memset(&format, 0, sizeof(format));
-  format.interleave = 4;
-#ifdef LSB_FIRST
-  format.format = (dsp->hw_info.type & SYSDEP_DSP_16BIT)? SND_PCM_SFMT_S16_LE:SND_PCM_SFMT_U8;
-#else
-  format.format = (dsp->hw_info.type & SYSDEP_DSP_16BIT)? SND_PCM_SFMT_S16_BE:SND_PCM_SFMT_U8;
-#endif
-  format.rate = dsp->hw_info.samplerate;
-  format.voices = (dsp->hw_info.type & SYSDEP_DSP_STEREO)? 2:1;
+	int err;
+	struct alsa_dsp_priv_data *priv = NULL;
+	struct sysdep_dsp_struct *dsp = NULL;
+	const struct sysdep_dsp_create_params *params = flags;
+	snd_pcm_info_t *info;
+	int open_mode = 0;
+
+	/* allocate the dsp struct */
+	dsp = calloc(1, sizeof(struct sysdep_dsp_struct));
+	if (!dsp) {
+		fprintf(stderr,
+			"error malloc failed for struct sysdep_dsp_struct\n");
+		return NULL;
+	}
+
+	/* alloc private data */
+	priv = calloc(1, sizeof(struct alsa_dsp_priv_data));
+	if(!priv) {
+		fprintf(stderr,
+			"error malloc failed for struct alsa_dsp_priv_data\n");
+		alsa_dsp_destroy(dsp);
+		return NULL;
+	}
+
+	/* fill in the functions and some data */
+	memset(priv,0,sizeof(struct alsa_dsp_priv_data));
+	dsp->_priv = priv;
+	dsp->get_freespace = alsa_dsp_get_freespace;
+	dsp->write = alsa_dsp_write;
+	dsp->destroy = alsa_dsp_destroy;
+	dsp->hw_info.type = params->type;
+	dsp->hw_info.samplerate = params->samplerate;
+	dsp->hw_info.bufsize = 0;
+
+	open_mode |= SND_PCM_NONBLOCK;
+
+	pcm_params.format = (dsp->hw_info.type & SYSDEP_DSP_16BIT) ?
+		SND_PCM_FORMAT_S16 /* Signed 16 bit CPU endian */ :
+		SND_PCM_FORMAT_U8;
+
+	/* rate >= 2000 && rate <= 128000 */
+	pcm_params.rate = dsp->hw_info.samplerate;
+	pcm_params.channels = (dsp->hw_info.type & SYSDEP_DSP_STEREO) ? 2 : 1;
+
+	err = snd_pcm_open(&priv->pcm_handle, pcm_name, stream, open_mode);
+	if (err < 0) {
+		fprintf(stderr_file, "Alsa error: audio open error: %s\n",
+			snd_strerror(err));
+		return NULL;
+	}
+
+	snd_pcm_info_alloca(&info);
+	err = snd_pcm_info(priv->pcm_handle, info);
+	if (err < 0) {
+		fprintf(stderr_file, "Alsa error: info error: %s\n",
+			snd_strerror(err));
+		return NULL;
+	}
+	/* set non-blocking mode if selected */
+	if (params->flags & SYSDEP_DSP_O_NONBLOCK) {
+		err = snd_pcm_nonblock(priv->pcm_handle, 1);
+		if (err < 0) {
+			fprintf(stderr_file,
+				"Alsa error: nonblock setting error: %s\n",
+				snd_strerror(err));
+			return NULL;
+		}
+	}
+
+	fprintf(stderr_file, "info: set to %dbit linear %s %dHz\n",
+		(dsp->hw_info.type & SYSDEP_DSP_16BIT) ? 16 : 8,
+		(dsp->hw_info.type & SYSDEP_DSP_STEREO) ? "stereo" : "mono",
+		dsp->hw_info.samplerate);
 
-  if ((err = snd_card_get_longname(alsa_card, &cardname)) < 0)
-   {
-     fprintf(stderr_file, "Alsa error: unable to obtain longname: %s\n", snd_strerror(err));
-     return NULL;
-   }
-  fprintf(stdout_file, "Using soundcard '%s'\n", cardname);
-  free(cardname);
-
-  if ((err = snd_pcm_open(&priv->pcm_handle, alsa_card, alsa_device, SND_PCM_OPEN_PLAYBACK|SND_PCM_OPEN_NONBLOCK)) < 0)
-   {
-     fprintf(stderr_file, "Alsa error: audio open error: %s\n", snd_strerror(err));
-     return NULL;
-   }
-
-  /* Get some information about this device */
-  memset(&cinfo, 0, sizeof(cinfo));
-  cinfo.channel = SND_PCM_CHANNEL_PLAYBACK;
-  if ((err = snd_pcm_channel_info(priv->pcm_handle, &cinfo)) < 0)
-   {
-     fprintf(stderr_file, "Error: channel info error: %s\n", snd_strerror(err));
-     alsa_dsp_destroy(dsp);
-     return NULL;
-   }
-  
-  /* Control if this device can play the sound */
-  if (cinfo.min_rate > format.rate || cinfo.max_rate < format.rate)
-   {
-     fprintf(stderr_file, "Alsa error: unsupported rate %iHz (valid range is %iHz-%iHz)\n", format.rate, cinfo.min_rate, cinfo.max_rate);
-     return NULL;
-   }
-  if (!(cinfo.formats & (1 << format.format)))
-   {
-     fprintf(stderr_file, "Alsa error: requested format %s isn't supported with hardware\n", snd_pcm_get_format_name(format.format));
-     return NULL;
-   }
-
-  /* Alloc a minimal buffer */
-  priv->buffer_size = 1024;
-  priv->audiobuf = (char *)malloc(priv->buffer_size);
-  if (priv->audiobuf == NULL)
-   {
-     fprintf(stderr_file, "Alsa error: not enough memory\n");
-     return NULL;
-   }
-
-  if (alsa_dsp_set_format(priv,&format)==0)
-    return NULL;
-
-  dsp->hw_info.bufsize =  priv->buffer_size * priv->frags /
-    alsa_dsp_bytes_per_sample[dsp->hw_info.type];
-
-
-  memset(priv->audiobuf,0,priv->buffer_size * priv->frag);
-
-  if (snd_pcm_channel_go(priv->pcm_handle, SND_PCM_CHANNEL_PLAYBACK)<0) 
-   {
-     fprintf(stderr_file, "Alsa error: unable to start playback\n");
-     return NULL;
-   }
-
-  fprintf(stderr_file, "info: set to %dbit linear %s %dHz bufsize=%d\n",
-      (dsp->hw_info.type & SYSDEP_DSP_16BIT)? 16:8,
-      (dsp->hw_info.type & SYSDEP_DSP_STEREO)? "stereo":"mono",
-      dsp->hw_info.samplerate,
-      dsp->hw_info.bufsize);
+	if (alsa_dsp_set_params(priv) == 0)
+		return NULL;
 
-  return dsp;
+	return dsp;
 }
 
 /*
@@ -255,20 +268,15 @@
  */
 static void alsa_dsp_destroy(struct sysdep_dsp_struct *dsp)
 {
-  struct alsa_dsp_priv_data *priv = dsp->_priv;
+	struct alsa_dsp_priv_data *priv = dsp->_priv;
 
-  if(priv)
-   {
-     if(priv->pcm_handle)
-      {
-	snd_pcm_playback_drain(priv->pcm_handle);
-	snd_pcm_close(priv->pcm_handle);
-      }
-     if (priv->audiobuf)
-       free(priv->audiobuf);
-     free(priv);
-   }
-  free(dsp);
+	if (priv) {
+		if (priv->pcm_handle) {
+			snd_pcm_close(priv->pcm_handle);
+		}
+		free(priv);
+	}
+	free(dsp);
 }
 
 /*
@@ -280,15 +288,24 @@
  */
 static int alsa_dsp_get_freespace(struct sysdep_dsp_struct *dsp)
 {
-  struct alsa_dsp_priv_data *priv = dsp->_priv;
-  snd_pcm_channel_status_t status;
-
-  memset(&status, 0, sizeof(status));
-  status.channel = SND_PCM_CHANNEL_PLAYBACK;
-  if (snd_pcm_channel_status(priv->pcm_handle,&status))
-    return -1;
-  else
-    return status.free / alsa_dsp_bytes_per_sample[dsp->hw_info.type];
+	int err;
+	struct alsa_dsp_priv_data *priv = dsp->_priv;
+	snd_pcm_status_t *status;
+	snd_pcm_uframes_t frames;
+
+	snd_pcm_status_alloca(&status);
+	err = snd_pcm_status(priv->pcm_handle, status);
+	if (err < 0) {
+		fprintf(stderr_file, "Alsa error: status error: %s\n",
+			snd_strerror(err));
+		return -1;
+	}
+	frames = snd_pcm_status_get_avail(status);
+	if (frames < 0)
+		return -1;
+	else
+		return frames * bits_per_frame / 8
+			/ alsa_dsp_bytes_per_sample[dsp->hw_info.type];
 }
 
 /*
@@ -301,202 +318,296 @@
 static int alsa_dsp_write(struct sysdep_dsp_struct *dsp, unsigned char *data,
     int count)
 {
-  int buffer_size,result;
-  struct alsa_dsp_priv_data *priv = dsp->_priv;
+	int data_size, result;
+	struct alsa_dsp_priv_data *priv = dsp->_priv;
 
-  buffer_size=count * alsa_dsp_bytes_per_sample[dsp->hw_info.type];
+	data_size = count * alsa_dsp_bytes_per_sample[dsp->hw_info.type]
+		* 8 / bits_per_frame;
 
-  if ( (result=snd_pcm_write(priv->pcm_handle,(const void *)data, buffer_size))!=buffer_size)
-   {
-     snd_pcm_channel_status_t status;
-
-     memset(&status, 0, sizeof(status));
-     status.channel = SND_PCM_CHANNEL_PLAYBACK;
-     if (snd_pcm_channel_status(priv->pcm_handle, &status)<0)
-      {
-	fprintf(stderr_file, "Alsa error: playback channel status error\n");
-	return -1;
-      }
-     if (status.status == SND_PCM_STATUS_UNDERRUN)
-      {
-	fprintf(stdout_file,"Alsa warning: underrun at position %u!!!\n", status.scount);
-	if (snd_pcm_plugin_prepare(priv->pcm_handle, SND_PCM_CHANNEL_PLAYBACK)<0)
-	 {
-	   fprintf(stderr_file, "Alsa error: underrun playback channel prepare error\n");
-	   return -1;
-	 }
-	priv->frag = 0;
-	return 0;
-      }
-     else
-      {
-	fprintf(stderr_file, "Alsa error: %d\n",status.status);
-      }
-   }
-  return result / alsa_dsp_bytes_per_sample[dsp->hw_info.type];
+	result = snd_pcm_writei(priv->pcm_handle, data, data_size);
+	if (result == -EAGAIN) {
+		return 0;
+	} else if (result == -EPIPE) {
+		int err;
+		snd_pcm_status_t *status;
+
+		snd_pcm_status_alloca(&status);
+		err = snd_pcm_status(priv->pcm_handle, status);
+		if (err < 0) {
+			fprintf(stderr_file,
+				"Alsa error: status error: %s\n",
+				snd_strerror(err));
+			return -1;
+		}
+		if (snd_pcm_status_get_state(status) == SND_PCM_STATE_XRUN) {
+			err = snd_pcm_prepare(priv->pcm_handle);
+			if (err < 0) {
+				fprintf(stderr_file,
+					"Alsa error: prepare error: %s\n",
+					snd_strerror(err));
+				return -1;
+			}
+			/* ok, data should be accepted again */
+			return 0;
+		}
+		fprintf(stderr_file, "Alsa error: write error: %s\n",
+			snd_strerror(result));
+		return -1;
+	} else if (result < 0) {
+		fprintf(stderr_file, "Alsa error: write error: %s\n",
+			snd_strerror(result));
+		return -1;
+	}
+
+	return result * bits_per_frame / 8
+		/ alsa_dsp_bytes_per_sample[dsp->hw_info.type];
 }
 
 /*
- * Function name : 
+ * Function name : alsa_device_list
  *
  * Description :
  * Input :
  * Output :
  */
-
 static int alsa_device_list(struct rc_option *option, const char *arg,
     int priority)
 {
-  snd_ctl_t *handle;
-  int card, err, dev;
-  unsigned int mask;
-  struct snd_ctl_hw_info info;
-  snd_pcm_info_t pcminfo;
-
-  mask = snd_cards_mask();
-  if (!mask)
-   {
-     printf("Alsa: no soundcards found...\n");
-     return -1;
-   }
-  fprintf(stdout,"Alsa Cards:\n");
-  for (card = 0; card < SND_CARDS; card++)
-   {
-     if (!(mask & (1 << card)))
-       continue;
-     if ((err = snd_ctl_open(&handle, card)) < 0)
-      {
-	fprintf(stderr,"Alsa error: control open (%i): %s\n", card, snd_strerror(err));
-	continue;
-      }
-     if ((err = snd_ctl_hw_info(handle, &info)) < 0)
-      {
-	fprintf(stderr,"Alsa error: control hardware info (%i): %s\n", card, snd_strerror(err));
-	snd_ctl_close(handle);
-	continue;
-      }
-     for (dev = 0; dev < info.pcmdevs; dev++)
-      {
-	if ((err = snd_ctl_pcm_info(handle, dev, &pcminfo)) < 0)
-	 {
-	   fprintf(stderr,"Alsa error: control digital audio info (%i): %s\n", card, snd_strerror(err));
-	   continue;
-	 }
-	if (pcminfo.flags & SND_PCM_INFO_PLAYBACK)
-	 {
-	   printf("Card #%i / Device #%i => %s\n",
-	       card,
-	       dev,
-	       pcminfo.name);
-	 }
-      }
-     snd_ctl_close(handle);
-   }
-  return -1;
+	snd_ctl_t *handle;
+	int card, err, dev;
+	snd_ctl_card_info_t *info;
+	snd_pcm_info_t *pcminfo;
+	snd_ctl_card_info_alloca(&info);
+	snd_pcm_info_alloca(&pcminfo);
+
+	card = -1;
+	if (snd_card_next(&card) < 0 || card < 0) {
+		printf("Alsa: no soundcards found...\n");
+		return -1;
+	}
+	fprintf(stdout, "Alsa cards:\n");
+	while (card >= 0) {
+		char name[32];
+		sprintf(name, "hw:%d", card);
+		err = snd_ctl_open(&handle, name, 0);
+		if (err < 0) {
+			fprintf(stderr, "Alsa error: control open (%i): %s\n",
+				card, snd_strerror(err));
+			continue;
+		}
+		err = snd_ctl_card_info(handle, info);
+		if (err < 0) {
+			fprintf(stderr,
+				"Alsa error: control hardware info (%i): %s\n",
+				card, snd_strerror(err));
+			snd_ctl_close(handle);
+			continue;
+		}
+		dev = -1;
+		while (1) {
+			int idx;
+			unsigned int count;
+
+			if (snd_ctl_pcm_next_device(handle, &dev) < 0)
+				;
+			if (dev < 0)
+				break;
+			snd_pcm_info_set_device(pcminfo, dev);
+			snd_pcm_info_set_subdevice(pcminfo, 0);
+			snd_pcm_info_set_stream(pcminfo, stream);
+			err = snd_ctl_pcm_info(handle, pcminfo);
+			if (err < 0) {
+				if (err != -ENOENT)
+					fprintf(stderr,
+						"Alsa error: control digital audio info (%i): %s\n",
+						card, snd_strerror(err));
+				continue;
+			}
+			fprintf(stderr,
+				"card %i: %s [%s], device %i: %s [%s]\n",
+				card,
+				snd_ctl_card_info_get_id(info),
+				snd_ctl_card_info_get_name(info),
+				dev,
+				snd_pcm_info_get_id(pcminfo),
+				snd_pcm_info_get_name(pcminfo));
+			count = snd_pcm_info_get_subdevices_count(pcminfo);
+			fprintf(stderr, "  Subdevices: %i/%i\n",
+				snd_pcm_info_get_subdevices_avail(pcminfo),
+				count);
+			for (idx = 0; idx < count; idx++) {
+				snd_pcm_info_set_subdevice(pcminfo, idx);
+				err = snd_ctl_pcm_info(handle, pcminfo);
+				if (err < 0) {
+					fprintf(stderr,
+						"Alsa error: control digital audio playback info (%i): %s",
+						card, snd_strerror(err));
+				} else {
+					fprintf(stderr,
+						"  Subdevice #%i: %s\n",
+						idx, snd_pcm_info_get_subdevice_name(pcminfo));
+				}
+			}
+		}
+		snd_ctl_close(handle);
+		if (snd_card_next(&card) < 0) {
+			break;
+		}
+	}
+	return -1;
 }
 
 /*
- * Function name : alsa_dsp_set_format
+ * Function name : alsa_pcm_list
  *
- * Description : Set the card to the audio format
+ * Description :
  * Input :
- *   priv: a ptr to struct alsa_dsp_priv_data
- *   format: the format wanted
  * Output :
- *  priv is modified with the current parameters.
- *  a boolean if the card accept the value.
- *  
  */
-static int alsa_dsp_set_format(struct alsa_dsp_priv_data *priv, snd_pcm_format_t *format)
+static int alsa_pcm_list(struct rc_option *option, const char *arg,
+			 int priority)
 {
-  unsigned int bps;	/* bytes per second */
-  unsigned int size;	/* fragment size */
-  int err;
-  struct snd_pcm_channel_params params;
-  struct snd_pcm_channel_setup setup;
-
-  bps = format->rate * format->voices;
-  switch (format->format)
-   {
-    case SND_PCM_SFMT_U8:
-      break;
-    case SND_PCM_SFMT_S16_LE:
-    case SND_PCM_SFMT_S16_BE:
-      bps <<= 1;
-      break;
-    default:
-      fprintf(stderr_file,"Alsa error: playback format unknow (%d)",format->format);
-      return 0;
-   }
-  bps >>= 2;		/* ok.. this buffer should be 0.25 sec */
-  if (bps < 16)
-    bps = 16;
-  size = 1;
-  while ((size << 1) < bps)
-    size <<= 1;
-
-  snd_pcm_channel_flush(priv->pcm_handle, SND_PCM_CHANNEL_PLAYBACK);
-
-  /* Configure the device with the format specified */
-  memset(&params, 0, sizeof(params));
-  params.channel = SND_PCM_CHANNEL_PLAYBACK;
-  params.mode = SND_PCM_MODE_BLOCK;
-  memcpy(&params.format, format, sizeof(snd_pcm_format_t));
-  params.start_mode = SND_PCM_START_FULL;
-  params.stop_mode = SND_PCM_STOP_STOP;
-  params.buf.block.frag_size = size;
-  params.buf.block.frags_min = 1;
-  params.buf.block.frags_max = -1;		/* little trick (playback only) */
-
-  if ((err = snd_pcm_channel_params(priv->pcm_handle, &params)) < 0)
-   {
-     fprintf(stderr_file, "Alsa error: unable to set channel params: %s\n",snd_strerror(err));
-     return 0;
-   }
-
-  if ((err = snd_pcm_plugin_prepare(priv->pcm_handle, SND_PCM_CHANNEL_PLAYBACK)) < 0)
-   {
-     fprintf(stderr_file, "Alsa error: unable to prepare channel: %s\n",snd_strerror(err));
-     return 0;
-   }
-
-  /* obtain current PCM setup */
-  memset(&setup, 0, sizeof(setup));
-  setup.mode = SND_PCM_MODE_BLOCK;
-  setup.channel = SND_PCM_CHANNEL_PLAYBACK;
-
-  if ((err = snd_pcm_channel_setup(priv->pcm_handle, &setup)) < 0)
-   {
-     fprintf(stderr_file, "Alsa error: unable to obtain setup: %s\n",snd_strerror(err));
-     return 0;
-   }
-
-  fprintf(stdout_file,"frag_size = %d / frags = %d / frags_min = %d / frags_max = %d\n",
-      setup.buf.block.frag_size,
-      setup.buf.block.frags,
-      setup.buf.block.frags_min,
-      setup.buf.block.frags_max);
-
-  /* Fill the private structure */
-  priv->frags = setup.buf.block.frags;
-  priv->buffer_size = setup.buf.block.frag_size;
-  priv->audiobuf = (char *)realloc(priv->audiobuf, priv->buffer_size);
-  if (priv->audiobuf == NULL)
-   {
-     fprintf(stderr_file, "Alsa error: not enough memory, need to allocate %d\n",priv->buffer_size);
-     return 0;
-   }
-  return 1;
-}
+        snd_config_t *conf;
+        snd_output_t *out;
 
-#endif
+        int err;
+
+	err = snd_config_update();
+        if (err < 0) {
+		fprintf(stderr, "Alsa error: snd_config_update: %s\n",
+			snd_strerror(err));
+                return -1;
+        }
+        snd_output_stdio_attach(&out, stderr, 0);
+        err = snd_config_search(snd_config, "pcm", &conf);
+        if (err < 0)
+                return -1;
+        fprintf(stderr, "ALSA PCM devices:\n");
+        snd_config_save(conf, out);
+        snd_output_close(out);
+
+	return -1;
+}
 
 /*
- * Function name : 
+ * Function name : alsa_dsp_set_params
  *
  * Description :
  * Input :
+ *   priv: a ptr to struct alsa_dsp_priv_data
  * Output :
+ *  priv is modified with the current parameters.
+ *  a boolean if the card accept the value.
+ *
  */
+static int alsa_dsp_set_params(struct alsa_dsp_priv_data *priv)
+{
+	snd_pcm_hw_params_t *hw_params;
+	snd_pcm_sw_params_t *sw_params;
 
+	snd_pcm_uframes_t buffer_size;
+	snd_pcm_uframes_t chunk_size;
+	int err;
+	unsigned int rate;
+
+	snd_pcm_hw_params_alloca(&hw_params);
+	snd_pcm_sw_params_alloca(&sw_params);
+	err = snd_pcm_hw_params_any(priv->pcm_handle, hw_params);
+	if (err < 0) {
+		fprintf(stderr_file,
+			"Alsa error: no configurations available\n");
+		return 0;
+	}
+
+	if (snd_pcm_hw_params_set_access(priv->pcm_handle, hw_params,
+					 SND_PCM_ACCESS_RW_INTERLEAVED) < 0) {
+		fprintf(stderr_file,
+			"Alsa error: interleaved access mode non available\n");
+		return 0;
+	}
+
+	err = snd_pcm_hw_params_set_format(priv->pcm_handle, hw_params, pcm_params.format);
+	if (err < 0) {
+		fprintf(stderr_file,
+			"Alsa error: requested format %s isn't supported with hardware\n",
+			snd_pcm_format_name(pcm_params.format));
+		return 0;
+	}
+
+	err = snd_pcm_hw_params_set_channels(priv->pcm_handle, hw_params, pcm_params.channels);
+	if (err < 0) {
+		fprintf(stderr_file,
+			"Alsa error: channels count non available\n");
+		return 0;
+	}
+
+	rate = pcm_params.rate;
+	if (snd_pcm_hw_params_set_rate_near(priv->pcm_handle, hw_params, &pcm_params.rate, 0) < 0) {
+		unsigned int min, max;
+
+		snd_pcm_hw_params_get_rate_min(hw_params, &min, 0);
+		snd_pcm_hw_params_get_rate_max(hw_params, &max, 0);
+		fprintf(stderr_file,
+			"Alsa error: unsupported rate %uHz (valid range is %uHz-%iHz)\n",
+			rate, min, max);
+		return 0;
+	}
+
+	snd_pcm_hw_params_set_buffer_time_near(priv->pcm_handle, hw_params, &buffer_time, 0);
+	snd_pcm_hw_params_set_period_size_near(priv->pcm_handle, hw_params, &period_frames, 0);
+
+	err = snd_pcm_hw_params(priv->pcm_handle, hw_params);
+	if (err < 0) {
+		fprintf(stderr_file,
+			"Alsa error: Unable to install hw params\n");
+		return 0;
+	}
+
+	snd_pcm_hw_params_get_period_size(hw_params, &chunk_size, 0);
+	snd_pcm_hw_params_get_buffer_size(hw_params, &buffer_size);
+	if (chunk_size == buffer_size) {
+		fprintf(stderr_file,
+			"Alsa error: cannot use period equal to buffer size (%lu == %lu)\n",
+			chunk_size, buffer_size);
+		return 0;
+	}
+
+	snd_pcm_sw_params_current(priv->pcm_handle, sw_params);
+
+	snd_pcm_sw_params_set_sleep_min(priv->pcm_handle, sw_params, 0);
+	snd_pcm_sw_params_set_xfer_align(priv->pcm_handle, sw_params, 1);
+	snd_pcm_sw_params_set_avail_min(priv->pcm_handle, sw_params, 1);
+
+	snd_pcm_sw_params_set_start_threshold(priv->pcm_handle, sw_params, 1);
+
+	snd_pcm_sw_params_set_stop_threshold(priv->pcm_handle, sw_params, buffer_size);
+
+	if (snd_pcm_sw_params(priv->pcm_handle, sw_params) < 0) {
+		fprintf(stderr_file, "Alsa error: unable to install sw params\n");
+		return 0;
+	}
+
+#if 0 /* DEBUG */
+	{
+		snd_output_t *log;
+		snd_output_stdio_attach(&log, stderr_file, 0);
+		snd_pcm_dump(priv->pcm_handle, log);
+		snd_output_close(log);
+	}
+#endif
+
+	bits_per_sample = snd_pcm_format_physical_width(pcm_params.format);
+	bits_per_frame = bits_per_sample * pcm_params.channels;
+
+	err = snd_pcm_prepare(priv->pcm_handle);
+	if (err < 0) {
+		fprintf(stderr_file,
+			"Alsa error: unable to prepare audio: %s\n",
+			snd_strerror(err));
+		return 0;
+	}
+
+	return 1;
+}
 
+#endif /* SYSDEP_DSP_ALSA */
diff -Naur ../tmp/xmame-0.37b7.1/src/unix/unix.mak xmame-0.37b7.1/src/unix/unix.mak
--- ../tmp/xmame-0.37b7.1/src/unix/unix.mak	2000-09-13 17:10:41.000000000 -0500
+++ xmame-0.37b7.1/src/unix/unix.mak	2023-06-30 15:15:52.069974475 -0400
@@ -13,6 +13,7 @@
 #note : -D__CPU_$(MY_CPU) is added automaticly later on.
 CFLAGS.i386       = -DLSB_FIRST -DX86_ASM
 CFLAGS.i386_noasm = -DLSB_FIRST
+CFLAGS.amd64      = -DLSB_FIRST -DALIGN_INTS -DALIGN_SHORTS -D__LP64__
 CFLAGS.ia64       = -DLSB_FIRST -DALIGN_INTS -DALIGN_SHORTS -D__LP64__
 CFLAGS.alpha      = -DLSB_FIRST -DALIGN_INTS -DALIGN_SHORTS -D__LP64__
 CFLAGS.m68k       = 
diff -Naur ../tmp/xmame-0.37b7.1/src/usrintrf.c xmame-0.37b7.1/src/usrintrf.c
--- ../tmp/xmame-0.37b7.1/src/usrintrf.c	2000-09-13 13:49:41.000000000 -0500
+++ xmame-0.37b7.1/src/usrintrf.c	2023-07-04 12:18:52.785585030 -0400
@@ -990,7 +990,7 @@
 
 		memcpy(orig_used_colors,palette_used_colors,Machine->drv->total_colors * sizeof(unsigned char));
 	}
-
+#if 0 /* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 	if (Machine->gamedrv->clone_of == &driver_neogeo ||
@@ -999,7 +999,7 @@
 		game_is_neogeo=1;
 #endif
 #endif
-
+#endif /* RB */
 	bank = -1;
 	color = 0;
 	firstdrawn = 0;
@@ -1120,6 +1120,7 @@
 
 				switch_true_orientation();
 			}
+#if 0 /* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 			else	/* neogeo sprite tiles */
@@ -1161,7 +1162,7 @@
 			}
 #endif
 #endif
-
+#endif /* RB */
 			if (bank >= 0)
 				sprintf(buf,"GFXSET %d COLOR %2X CODE %X-%X",bank,color,firstdrawn,lastdrawn);
 			else
@@ -2698,7 +2699,7 @@
 
 }
 
-
+#if 0 /* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 int memcard_menu(struct osd_bitmap *bitmap, int selection)
@@ -2821,7 +2822,7 @@
 }
 #endif
 #endif
-
+#endif /* RB */
 
 #ifndef MESS
 enum { UI_SWITCH = 0,UI_DEFCODE,UI_CODE,UI_ANALOG,UI_CALIBRATE,
@@ -2891,7 +2892,7 @@
 	{
 		menu_item[menu_total] = ui_getstring (UI_cheat); menu_action[menu_total++] = UI_CHEAT;
 	}
-
+#if 0/* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 	if (Machine->gamedrv->clone_of == &driver_neogeo ||
@@ -2902,7 +2903,7 @@
 	}
 #endif
 #endif
-
+#endif /* RB */
 	menu_item[menu_total] = ui_getstring (UI_resetgame); menu_action[menu_total++] = UI_RESET;
 	menu_item[menu_total] = ui_getstring (UI_returntogame); menu_action[menu_total++] = UI_EXIT;
 	menu_item[menu_total] = 0; /* terminate array */
@@ -2963,6 +2964,7 @@
 			case UI_CHEAT:
 				res = cheat_menu(bitmap, sel >> SEL_BITS);
 				break;
+#if 0 /* RB */
 #ifndef MESS
 #ifndef TINY_COMPILE
 			case UI_MEMCARD:
@@ -2970,6 +2972,7 @@
 				break;
 #endif
 #endif
+#endif /* RB */
 		}
 
 		if (res == -1)
